{
  "name": "spoon",
  "version": "0.1.2",
  "main": "lib/spoon",
  "dependencies": {
    "esprima": "~0.9.9",
    "uglify-js": "~1.3.3",
    "escodegen": "0.0.9"
  },
  "devDependencies": {
    "mocha": "~1.4.2"
  },
  "scripts": {
    "test": "mocha --reporter spec test/*-test.js"
  },
  "readme": "# Spoon\n\nContinuation passing style for javascript.\n\n## It's hot\n\nSpoon is a javascript *transpiler*, it's designed to compile javascript to...\njavascript.\n\nLets take following code sample:\n```javascript\nvar x = 1;\n\nvar y = hardMath(x) * 2;\n\nconsole.log(y);\n```\n\nSuppose you would like to do `hardMath` on some remote machine (or in thread),\nthis will surely require you to make this call asynchronous - i.e. pass a\ncontinuation as a callback for `hardMath` function.\n\nCalling `spoon(code, ['hardMath'])` will find all occurences of `hardMath` and\nreplace them with following thing:\n```javascript\nfunction __$fn1(__$r) {\n    y = __$r * 2;\n    console.log(y);\n    return __$callback.call(this);\n};\n\nvar y;\n\nvar x;\n\nx = 1;\n\nreturn hardMath(x, __$fn1);\n```\n\nAs you can see `__$callback` function should be available in a context.\n\n## Why spoon is interesting?\n\nSpoon isn't just doing stupid tricks with your code, it compiles javascript to\nwell-known form (used by almost every compiler, including v8) HIR (High-Level\nintermediate representation).\n\nYou can do it yourself by calling:\n```javascript\nvar cfg = spoon.construct(esprima.parse('x = y + 1 * 2'));\n\nconsole.log(cfg.toString());\n```\n\nWill produce:\n```\n--- CFG ---\n[block 0]\n# predecessors: \n# parent: null\n# frontier: \n# cfrontier: \ni0 = var y\ni1 = get x\ni2 = literal 1\ni3 = literal 2\ni4 = binop *, i2, i3\ni5 = binop +, i1, i4\ni6 = set =, y, i5\n# successors: \n# children: \n```\n\nYou can manipulate blocks, change order of instruction, do some optimizations,\nand, after that, compile CFG back to JS:\n```javascript\nspoon.render(cfg);\n```\n\n## API\n\n```javascript\n// Transpile code\nspoon(code, [ functions ], {\n  declaration: 'enable spoon', // spoon will touch only code with\n                               // \"enable spoon\"; declaration\n  uglify: {},                  // uglifyjs options (used for code generation)\n  esprima: {}                  // esprima options (used for parsing)\n})\n\n// Construct CFG\nvar cfg = spoon.construct(EsprimaAST);\n\n// Render CFG\nspoon.render(cfg);\n```\n\n### License\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2012.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "spoon@0.1.2",
  "description": "Continuation passing style for javascript.",
  "_from": "spoon"
}
